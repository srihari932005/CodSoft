import tkinter as tk
from tkinter import messagebox
import math

class TicTacToe:
    def _init_(self):
        self.window = tk.Tk()
        self.window.title("Tic-Tac-Toe AI")
        self.board = [[None for _ in range(3)] for _ in range(3)]
        self.buttons = [[None for _ in range(3)] for _ in range(3)]
        self.current_player = "X"  # Human player is "X", AI is "O"
        self.create_board()

    def create_board(self):
        for i in range(3):
            for j in range(3):
                self.buttons[i][j] = tk.Button(self.window, text="", font=('Arial', 24), height=2, width=5,
                                               command=lambda row=i, col=j: self.human_move(row, col))
                self.buttons[i][j].grid(row=i, column=j)

    def human_move(self, row, col):
        if self.board[row][col] is None:
            self.board[row][col] = "X"
            self.buttons[row][col].config(text="X")
            if self.check_winner("X"):
                messagebox.showinfo("Game Over", "You Win!")
                self.reset_board()
            elif self.is_draw():
                messagebox.showinfo("Game Over", "It's a Draw!")
                self.reset_board()
            else:
                self.current_player = "O"
                self.ai_move()

    def ai_move(self):
        best_score = -math.inf
        best_move = None
        for i in range(3):
            for j in range(3):
                if self.board[i][j] is None:
                    self.board[i][j] = "O"
                    score = self.minimax(0, False)
                    self.board[i][j] = None
                    if score > best_score:
                        best_score = score
                        best_move = (i, j)

        if best_move:
            row, col = best_move
            self.board[row][col] = "O"
            self.buttons[row][col].config(text="O")
            if self.check_winner("O"):
                messagebox.showinfo("Game Over", "AI Wins!")
                self.reset_board()
            elif self.is_draw():
                messagebox.showinfo("Game Over", "It's a Draw!")
                self.reset_board()
            else:
                self.current_player = "X"

    def minimax(self, depth, is_maximizing):
        if self.check_winner("O"):
            return 1
        if self.check_winner("X"):
            return -1
        if self.is_draw():
            return 0

        if is_maximizing:
            best_score = -math.inf
            for i in range(3):
                for j in range(3):
                    if self.board[i][j] is None:
                        self.board[i][j] = "O"
                        score = self.minimax(depth + 1, False)
                        self.board[i][j] = None
                        best_score = max(best_score, score)
            return best_score
        else:
            best_score = math.inf
            for i in range(3):
                for j in range(3):
                    if self.board[i][j] is None:
                        self.board[i][j] = "X"
                        score = self.minimax(depth + 1, True)
                        self.board[i][j] = None
                        best_score = min(best_score, score)
            return best_score

    def check_winner(self, player):
        # Check rows, columns, and diagonals
        for i in range(3):
            if all(self.board[i][j] == player for j in range(3)):
                return True
            if all(self.board[j][i] == player for j in range(3)):
                return True
        if all(self.board[i][i] == player for i in range(3)) or all(self.board[i][2 - i] == player for i in range(3)):
            return True
        return False

    def is_draw(self):
        return all(self.board[i][j] is not None for i in range(3) for j in range(3))

    def reset_board(self):
        self.board = [[None for _ in range(3)] for _ in range(3)]
        for i in range(3):
            for j in range(3):
                self.buttons[i][j].config(text="")
        self.current_player = "X"

    def run(self):
        self.window.mainloop()

if _name_ == "_main_":
    game = TicTacToe()
    game.run()
